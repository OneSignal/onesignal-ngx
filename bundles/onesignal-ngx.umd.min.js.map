{"version":3,"sources":["../../../projects/onesignal-ngx/src/lib/onesignal-ngx.service.ts","../../../projects/onesignal-ngx/src/lib/onesignal-ngx.component.ts","../../../projects/onesignal-ngx/src/lib/onesignal-ngx.module.ts"],"names":["oneSignalLogin","externalId","jwtToken","Promise","resolve","reject","isOneSignalScriptFailed","Error","_a","window","OneSignalDeferred","push","oneSignal","login","then","oneSignalLogout","logout","oneSignalSetConsentGiven","consent","setConsentGiven","oneSignalSetConsentRequired","requiresConsent","setConsentRequired","UserNamespace","onesignalId","_b","OneSignal","User","addAlias","label","id","addAliases","aliases","removeAlias","removeAliases","labels","addEmail","email","removeEmail","addSms","smsNumber","removeSms","addTag","key","value","addTags","tags","removeTag","removeTags","keys","getTags","retVal","addEventListener","event","listener","removeEventListener","setLanguage","language","getLanguage","PushSubscription","_c","token","optedIn","optIn","optOut","SessionNamespace","sendOutcome","outcomeName","outcomeWeight","Session","sendUniqueOutcome","DebugNamespace","setLogLevel","logLevel","Debug","SlidedownNamespace","promptPush","options","Slidedown","promptPushCategories","promptSms","promptEmail","promptSmsAndEmail","NotificationsNamespace","permissionNative","Notifications","permission","setDefaultUrl","url","setDefaultTitle","title","isPushSupported","PushSubscriptionOptions","prototype","hasOwnProperty","safari","pushNotification","top","navigator","vendor","platform","requestPermission","script","ONESIGNAL_SDK_ID","ONE_SIGNAL_SCRIPT_SRC","isOneSignalInitialized","document","createElement","defer","src","onerror","head","appendChild","this","init","appId","Injectable","args","providedIn","OnesignalNgxComponent","ngOnInit","Component","selector","template","NgModule","declarations","imports","exports"],"mappings":"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","sourcesContent":["export interface AutoPromptOptions { force?: boolean; forceSlidedownOverNative?: boolean; slidedownPromptOptions?: IOneSignalAutoPromptOptions; }\nexport interface IOneSignalAutoPromptOptions { force?: boolean; forceSlidedownOverNative?: boolean; isInUpdateMode?: boolean; categoryOptions?: IOneSignalCategories; }\nexport interface IOneSignalCategories { positiveUpdateButton: string; negativeUpdateButton: string; savingButtonText: string; errorButtonText: string; updateMessage: string; tags: IOneSignalTagCategory[]; }\nexport interface IOneSignalTagCategory { tag: string; label: string; checked?: boolean; }\nexport type PushSubscriptionNamespaceProperties = { id: string | null | undefined; token: string | null | undefined; optedIn: boolean; };\nexport type SubscriptionChangeEvent = { previous: PushSubscriptionNamespaceProperties; current: PushSubscriptionNamespaceProperties; };\nexport type NotificationEventName = 'click' | 'foregroundWillDisplay' | 'dismiss' | 'permissionChange' | 'permissionPromptDisplay';\nexport type SlidedownEventName = 'slidedownShown';\nexport type OneSignalDeferredLoadedCallback = (onesignal: IOneSignalOneSignal) => void;\nexport interface IOSNotification {\n  /**\n   * The OneSignal notification id;\n   *  - Primary id on OneSignal's REST API and dashboard\n   */\n  readonly notificationId: string;\n\n  /**\n   * Visible title text on the notification\n   */\n  readonly title?: string;\n\n  /**\n   * Visible body text on the notification\n   */\n  readonly body: string;\n\n  /**\n   * Visible icon the notification; URL format\n   */\n  readonly icon?: string;\n\n  /**\n   * Visible small badgeIcon that displays on some devices; URL format\n   * Example: On Android's status bar\n   */\n  readonly badgeIcon?: string;\n\n  /**\n   * Visible image on the notification; URL format\n   */\n  readonly image?: string;\n\n  /**\n   * Visible buttons on the notification\n   */\n  readonly actionButtons?: IOSNotificationActionButton[];\n\n  /**\n   * If this value is the same as existing notification, it will replace it\n   * Can be set when creating the notification with \"Web Push Topic\" on the dashboard\n   * or web_push_topic from the REST API.\n   */\n  readonly topic?: string;\n\n  /**\n   * Custom object that was sent with the notification;\n   * definable when creating the notification from the OneSignal REST API or dashboard\n   */\n  readonly additionalData?: object;\n\n  /**\n   * URL to open when clicking or tapping on the notification\n   */\n  readonly launchURL?: string;\n\n  /**\n   * Confirm the push was received by reporting back to OneSignal\n   */\n  readonly confirmDelivery: boolean;\n}\n\nexport interface IOSNotificationActionButton {\n  /**\n   * Any unique identifier to represent which button was clicked. This is typically passed back to the service worker\n   * and host page through events to identify which button was clicked.\n   * e.g. 'like-button'\n   */\n  readonly actionId: string;\n  /**\n   * The notification action button's text.\n   */\n  readonly text: string;\n  /**\n   * A valid publicly reachable HTTPS URL to an image.\n   */\n  readonly icon?: string;\n  /**\n   * The URL to open the web browser to when this action button is clicked.\n   */\n  readonly launchURL?: string;\n}\n\nexport interface NotificationClickResult {\n  readonly actionId?: string;\n  readonly url?: string;\n}\n\nexport type NotificationEventTypeMap = {\n  'click': NotificationClickEvent;\n  'foregroundWillDisplay': NotificationForegroundWillDisplayEvent;\n  'dismiss': NotificationDismissEvent;\n  'permissionChange': boolean;\n  'permissionPromptDisplay': void;\n};\n\nexport interface NotificationForegroundWillDisplayEvent {\n  readonly notification: IOSNotification;\n  preventDefault(): void;\n}\n\nexport interface NotificationDismissEvent {\n  notification: IOSNotification;\n}\n\nexport interface NotificationClickEvent {\n  readonly notification: IOSNotification;\n  readonly result: NotificationClickResult;\n}\n\nexport type UserChangeEvent = {\n  current: UserNamespaceProperties;\n};\nexport type UserNamespaceProperties = {\n  onesignalId: string | undefined;\n  externalId: string | undefined;\n};\n\nexport interface IInitObject {\n  appId: string;\n  subdomainName?: string;\n  requiresUserPrivacyConsent?: boolean;\n  promptOptions?: {\n    slidedown: {\n      prompts: {\n        /**\n         * Whether to automatically display the prompt.\n         * `true` will display the prompt based on the delay options.\n         * `false` will prevent the prompt from displaying until the Slidedowns methods are used.\n         */\n        autoPrompt: boolean;\n\n        /**\n         * Only available for type: category. Up to 10 categories.\n         * @example\n         *  categories: [{ tag: 'local_news', label: 'Local News' }] // The user will be tagged with local_news but will see \"Local News\" in the prompt.\n         */\n        categories: {\n          /** Should identify the action. */\n          tag: string;\n\n          /** What the user will see. */\n          label: string;\n        }[];\n\n        /**\n         * The delay options for the prompt.\n         * @example delay: { pageViews: 3, timeDelay: 20 } // The user will not be shown the prompt until 20 seconds after the 3rd page view.\n         */\n        delay: {\n          /** The number of pages a user needs to visit before the prompt is displayed. */\n          pageViews?: number;\n\n          /** The number of seconds a user needs to wait before the prompt is displayed.Both options must be satisfied for the prompt to display */\n          timeDelay?: number;\n        };\n\n        /**\n         * The text to display in the prompt.\n         */\n        text?: {\n          /** The callout asking the user to opt-in. Up to 90 characters. */\n          actionMessage?: string;\n\n          /** Triggers the opt-in. Up to 15 characters. */\n          acceptButton?: string;\n\n          /** Cancels opt-in. Up to 15 characters. */\n          cancelMessage?: string;\n\n          /** The message of the confirmation prompt displayed after the email and/or phone number is provided. Up to 90 characters. */\n          confirmMessage?: string;\n\n          /** Identifies the email text field. Up to 15 characters. */\n          emailLabel?: string;\n\n          /** Cancels the category update. Up to 15 characters. */\n          negativeUpdateButton?: string;\n\n          /** Saves the updated category tags. Up to 15 characters. */\n          positiveUpdateButton?: string;\n\n          /** Identifies the phone number text field. Up to 15 characters. */\n          smsLabel?: string;\n\n          /** A different message shown to subscribers presented the prompt again to update categories. Up to 90 characters. */\n          updateMessage?: string;\n        };\n\n        /**\n         * The type of prompt to display.\n         * `push` which is the Slide Prompt without categories.\n         * `category` which is the Slide Prompt with categories.\n         * `sms` only asks for phone number.\n         * `email` only asks for email address.\n         * `smsAndEmail` asks for both phone number and email address.\n         */\n        type: 'push' | 'category' | 'sms' | 'email' | 'smsAndEmail';\n      }[];\n    };\n  };\n  welcomeNotification?: {\n    /**\n     * Disables sending a welcome notification to new site visitors. If you want to disable welcome notifications, this is the only option you need.\n     */\n    disabled?: boolean;\n\n    /**\n     * The welcome notification's message. You can localize this to your own language.\n     * If left blank or set to blank, the default of 'Thanks for subscribing!' will be used.\n     */\n    message: string;\n\n    /**\n     * The welcome notification's title. You can localize this to your own language. If not set, or left blank, the site's title will be used.\n     * Set to one space ' ' to clear the title, although this is not recommended.\n     */\n    title?: string;\n\n    /**\n     * By default, clicking the welcome notification does not open any link.\n     * This is recommended because the user has just visited your site and subscribed.\n     */\n    url: string;\n  };\n\n  /**\n   * Will enable customization of the notify/subscription bell button.\n   */\n  notifyButton?: {\n    /**\n     * A function you define that returns true to show the Subscription Bell, or false to hide it.\n     * Typically used the hide the Subscription Bell after the user is subscribed.\n     * This function is not re-evaluated on every state change; this function is only evaluated once when the Subscription Bell begins to show.\n     */\n    displayPredicate?: () => boolean | Promise<boolean>;\n\n    /**\n     * Enable the Subscription Bell. The Subscription Bell is otherwise disabled by default.\n     */\n    enable?: boolean;\n\n    /** Specify CSS-valid pixel offsets using bottom, left, and right. */\n    offset?: { bottom: string; left: string; right: string };\n\n    /**\n     * If `true`, the Subscription Bell will display an icon that there is 1 unread message.\n     * When hovering over the Subscription Bell, the user will see custom text set by message.prenotify.\n     */\n    prenotify: boolean;\n\n    /** Either `bottom-left` or `bottom-right`. The Subscription Bell will be fixed at this location on your page. */\n    position?: 'bottom-left' | 'bottom-right';\n\n    /**  Set `false` to hide the 'Powered by OneSignal' text in the Subscription Bell dialog popup. */\n    showCredit: boolean;\n\n    /**\n     * The Subscription Bell will initially appear at one of these sizes, and then shrink down to size `small` after the user subscribes.\n     */\n    size?: 'small' | 'medium' | 'large';\n\n    /** Customize the Subscription Bell text. */\n    text: {\n      'dialog.blocked.message': string;\n      'dialog.blocked.title': string;\n      'dialog.main.button.subscribe': string;\n      'dialog.main.button.unsubscribe': string;\n      'dialog.main.title': string;\n      'message.action.resubscribed': string;\n      'message.action.subscribed': string;\n      'message.action.subscribing': string;\n      'message.action.unsubscribed': string;\n      'message.prenotify': string;\n      'tip.state.blocked': string;\n      'tip.state.subscribed': string;\n      'tip.state.unsubscribed': string;\n    };\n  };\n\n  persistNotification?: boolean;\n  webhooks?: {\n    /**\n     * Enable this setting only if your server has CORS enabled and supports non-simple CORS requests.\n     * If this setting is disabled, your webhook will not need CORS to receive data, but it will not receive the custom headers.\n     * The simplest option is to leave it disabled.\n     * @default false\n     */\n    cors: boolean;\n\n    /**\n     * This event occurs after a notification is clicked.\n     * @example https://site.com/hook\n     */\n    'notification.clicked'?: string;\n\n    /**\n     * This event occurs after a notification is intentionally dismissed by the user (clicking the notification body or one of the notification action buttons does not trigger the dismissed webhook),\n     * after a group of notifications are all dismissed (with this notification as part of that group), or after a notification expires on its own time and disappears. This event is supported on Chrome only.\n     * @example https://site.com/hook\n     */\n    'notification.dismissed'?: string;\n\n    /**\n     * This event occurs after a notification is displayed.\n     * @example https://site.com/hook\n     */\n    'notification.willDisplay'?: string;\n  };\n  autoResubscribe?: boolean;\n  autoRegister?: boolean;\n  notificationClickHandlerMatch?: string;\n  notificationClickHandlerAction?: string;\n  path?: string;\n  serviceWorkerParam?: { scope: string };\n  serviceWorkerPath?: string;\n  serviceWorkerOverrideForTypical?: boolean;\n  serviceWorkerUpdaterPath?: string;\n  allowLocalhostAsSecureOrigin?: boolean;\n  [key: string]: any;\n}\n\nexport interface IOneSignalOneSignal {\n\tSlidedown: IOneSignalSlidedown;\n\tNotifications: IOneSignalNotifications;\n\tSession: IOneSignalSession;\n\tUser: IOneSignalUser;\n\tDebug: IOneSignalDebug;\n\tlogin(externalId: string, jwtToken?: string): Promise<void>;\n\tlogout(): Promise<void>;\n\tinit(options: IInitObject): Promise<void>;\n\tsetConsentGiven(consent: boolean): Promise<void>;\n\tsetConsentRequired(requiresConsent: boolean): Promise<void>;\n}\nexport interface IOneSignalNotifications {\n\tpermissionNative: NotificationPermission;\n\tpermission: boolean;\n\tsetDefaultUrl(url: string): Promise<void>;\n\tsetDefaultTitle(title: string): Promise<void>;\n\tisPushSupported(): boolean;\n\trequestPermission(): Promise<void>;\n\taddEventListener<K extends NotificationEventName>(event: K, listener: (obj: NotificationEventTypeMap[K]) => void): void;\n\tremoveEventListener<K extends NotificationEventName>(event: K, listener: (obj: NotificationEventTypeMap[K]) => void): void;\n}\nexport interface IOneSignalSlidedown {\n\tpromptPush(options?: AutoPromptOptions): Promise<void>;\n\tpromptPushCategories(options?: AutoPromptOptions): Promise<void>;\n\tpromptSms(options?: AutoPromptOptions): Promise<void>;\n\tpromptEmail(options?: AutoPromptOptions): Promise<void>;\n\tpromptSmsAndEmail(options?: AutoPromptOptions): Promise<void>;\n\taddEventListener(event: SlidedownEventName, listener: (wasShown: boolean) => void): void;\n\tremoveEventListener(event: SlidedownEventName, listener: (wasShown: boolean) => void): void;\n}\nexport interface IOneSignalDebug {\n\tsetLogLevel(logLevel: string): void;\n}\nexport interface IOneSignalSession {\n\tsendOutcome(outcomeName: string, outcomeWeight?: number): Promise<void>;\n\tsendUniqueOutcome(outcomeName: string): Promise<void>;\n}\nexport interface IOneSignalUser {\n\tonesignalId: string | undefined;\n\texternalId: string | undefined;\n\tPushSubscription: IOneSignalPushSubscription;\n\taddAlias(label: string, id: string): void;\n\taddAliases(aliases: { [key: string]: string }): void;\n\tremoveAlias(label: string): void;\n\tremoveAliases(labels: string[]): void;\n\taddEmail(email: string): void;\n\tremoveEmail(email: string): void;\n\taddSms(smsNumber: string): void;\n\tremoveSms(smsNumber: string): void;\n\taddTag(key: string, value: string): void;\n\taddTags(tags: { [key: string]: string }): void;\n\tremoveTag(key: string): void;\n\tremoveTags(keys: string[]): void;\n\tgetTags(): { [key: string]: string };\n\taddEventListener(event: 'change', listener: (change: UserChangeEvent) => void): void;\n\tremoveEventListener(event: 'change', listener: (change: UserChangeEvent) => void): void;\n\tsetLanguage(language: string): void;\n\tgetLanguage(): string;\n}\nexport interface IOneSignalPushSubscription {\n\tid: string | null | undefined;\n\ttoken: string | null | undefined;\n\toptedIn: boolean | undefined;\n\toptIn(): Promise<void>;\n\toptOut(): Promise<void>;\n\taddEventListener(event: 'change', listener: (change: SubscriptionChangeEvent) => void): void;\n\tremoveEventListener(event: 'change', listener: (change: SubscriptionChangeEvent) => void): void;\n}\nfunction oneSignalLogin(externalId: string, jwtToken?: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.login(externalId, jwtToken).then(() => resolve());\n    });\n  });\n}\nfunction oneSignalLogout(): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.logout().then(() => resolve());\n    });\n  });\n}\nfunction oneSignalSetConsentGiven(consent: boolean): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.setConsentGiven(consent).then(() => resolve());\n    });\n  });\n}\nfunction oneSignalSetConsentRequired(requiresConsent: boolean): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.setConsentRequired(requiresConsent).then(() => resolve());\n    });\n  });\n}\nfunction slidedownPromptPush(options?: AutoPromptOptions): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.Slidedown.promptPush(options).then(() => resolve());\n    });\n  });\n}\nfunction slidedownPromptPushCategories(options?: AutoPromptOptions): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.Slidedown.promptPushCategories(options).then(() => resolve());\n    });\n  });\n}\nfunction slidedownPromptSms(options?: AutoPromptOptions): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.Slidedown.promptSms(options).then(() => resolve());\n    });\n  });\n}\nfunction slidedownPromptEmail(options?: AutoPromptOptions): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.Slidedown.promptEmail(options).then(() => resolve());\n    });\n  });\n}\nfunction slidedownPromptSmsAndEmail(options?: AutoPromptOptions): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.Slidedown.promptSmsAndEmail(options).then(() => resolve());\n    });\n  });\n}\nfunction slidedownAddEventListener(event: SlidedownEventName, listener: (wasShown: boolean) => void): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.Slidedown.addEventListener(event, listener);\n  });\n}\n\nfunction slidedownRemoveEventListener(event: SlidedownEventName, listener: (wasShown: boolean) => void): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.Slidedown.removeEventListener(event, listener);\n  });\n}\n\nfunction notificationsSetDefaultUrl(url: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.Notifications.setDefaultUrl(url).then(() => resolve());\n    });\n  });\n}\nfunction notificationsSetDefaultTitle(title: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.Notifications.setDefaultTitle(title).then(() => resolve());\n    });\n  });\n}\nfunction notificationsRequestPermission(): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.Notifications.requestPermission().then(() => resolve());\n    });\n  });\n}\nfunction notificationsAddEventListener<K extends NotificationEventName>(event: K, listener: (obj: NotificationEventTypeMap[K]) => void): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.Notifications.addEventListener(event, listener);\n  });\n}\n\nfunction notificationsRemoveEventListener<K extends NotificationEventName>(event: K, listener: (obj: NotificationEventTypeMap[K]) => void): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.Notifications.removeEventListener(event, listener);\n  });\n}\n\nfunction sessionSendOutcome(outcomeName: string, outcomeWeight?: number): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.Session.sendOutcome(outcomeName, outcomeWeight).then(() => resolve());\n    });\n  });\n}\nfunction sessionSendUniqueOutcome(outcomeName: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.Session.sendUniqueOutcome(outcomeName).then(() => resolve());\n    });\n  });\n}\nfunction userAddAlias(label: string, id: string): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.addAlias(label, id);\n  });\n}\n\nfunction userAddAliases(aliases: { [key: string]: string }): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.addAliases(aliases);\n  });\n}\n\nfunction userRemoveAlias(label: string): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.removeAlias(label);\n  });\n}\n\nfunction userRemoveAliases(labels: string[]): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.removeAliases(labels);\n  });\n}\n\nfunction userAddEmail(email: string): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.addEmail(email);\n  });\n}\n\nfunction userRemoveEmail(email: string): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.removeEmail(email);\n  });\n}\n\nfunction userAddSms(smsNumber: string): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.addSms(smsNumber);\n  });\n}\n\nfunction userRemoveSms(smsNumber: string): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.removeSms(smsNumber);\n  });\n}\n\nfunction userAddTag(key: string, value: string): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.addTag(key, value);\n  });\n}\n\nfunction userAddTags(tags: { [key: string]: string }): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.addTags(tags);\n  });\n}\n\nfunction userRemoveTag(key: string): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.removeTag(key);\n  });\n}\n\nfunction userRemoveTags(keys: string[]): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.removeTags(keys);\n  });\n}\n\nfunction userGetTags(): { [key: string]: string } {\n  let retVal: { [key: string]: string };\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    retVal = oneSignal.User.getTags();\n  });\n  // @ts-ignore\n  return retVal;\n}\n\nfunction userAddEventListener(event: 'change', listener: (change: UserChangeEvent) => void): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.addEventListener(event, listener);\n  });\n}\n\nfunction userRemoveEventListener(event: 'change', listener: (change: UserChangeEvent) => void): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.removeEventListener(event, listener);\n  });\n}\n\nfunction userSetLanguage(language: string): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.setLanguage(language);\n  });\n}\n\nfunction userGetLanguage(): string {\n  let retVal: string;\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    retVal = oneSignal.User.getLanguage();\n  });\n  // @ts-ignore\n  return retVal;\n}\n\nfunction pushSubscriptionOptIn(): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.User.PushSubscription.optIn().then(() => resolve());\n    });\n  });\n}\nfunction pushSubscriptionOptOut(): Promise<void> {\n  return new Promise((resolve, reject) => {\n    if (isOneSignalScriptFailed) {\n      reject(new Error('OneSignal script failed to load.'));\n      return;\n    }\n\n    window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n      oneSignal.User.PushSubscription.optOut().then(() => resolve());\n    });\n  });\n}\nfunction pushSubscriptionAddEventListener(event: 'change', listener: (change: SubscriptionChangeEvent) => void): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.PushSubscription.addEventListener(event, listener);\n  });\n}\n\nfunction pushSubscriptionRemoveEventListener(event: 'change', listener: (change: SubscriptionChangeEvent) => void): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.User.PushSubscription.removeEventListener(event, listener);\n  });\n}\n\nfunction debugSetLogLevel(logLevel: string): void {\n  window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n    oneSignal.Debug.setLogLevel(logLevel);\n  });\n}\n\n\nconst PushSubscriptionNamespace: IOneSignalPushSubscription = {\n\tget id(): string | null | undefined { return window.OneSignal?.User?.PushSubscription?.id; },\n\tget token(): string | null | undefined { return window.OneSignal?.User?.PushSubscription?.token; },\n\tget optedIn(): boolean | undefined { return window.OneSignal?.User?.PushSubscription?.optedIn; },\n\toptIn: pushSubscriptionOptIn,\n\toptOut: pushSubscriptionOptOut,\n\taddEventListener: pushSubscriptionAddEventListener,\n\tremoveEventListener: pushSubscriptionRemoveEventListener,\n};\n\nconst UserNamespace: IOneSignalUser = {\n\tget onesignalId(): string | undefined { return window.OneSignal?.User?.onesignalId; },\n\tget externalId(): string | undefined { return window.OneSignal?.User?.externalId; },\n\taddAlias: userAddAlias,\n\taddAliases: userAddAliases,\n\tremoveAlias: userRemoveAlias,\n\tremoveAliases: userRemoveAliases,\n\taddEmail: userAddEmail,\n\tremoveEmail: userRemoveEmail,\n\taddSms: userAddSms,\n\tremoveSms: userRemoveSms,\n\taddTag: userAddTag,\n\taddTags: userAddTags,\n\tremoveTag: userRemoveTag,\n\tremoveTags: userRemoveTags,\n\tgetTags: userGetTags,\n\taddEventListener: userAddEventListener,\n\tremoveEventListener: userRemoveEventListener,\n\tsetLanguage: userSetLanguage,\n\tgetLanguage: userGetLanguage,\n\tPushSubscription: PushSubscriptionNamespace,\n};\n\nconst SessionNamespace: IOneSignalSession = {\n\tsendOutcome: sessionSendOutcome,\n\tsendUniqueOutcome: sessionSendUniqueOutcome,\n};\n\nconst DebugNamespace: IOneSignalDebug = {\n\tsetLogLevel: debugSetLogLevel,\n};\n\nconst SlidedownNamespace: IOneSignalSlidedown = {\n\tpromptPush: slidedownPromptPush,\n\tpromptPushCategories: slidedownPromptPushCategories,\n\tpromptSms: slidedownPromptSms,\n\tpromptEmail: slidedownPromptEmail,\n\tpromptSmsAndEmail: slidedownPromptSmsAndEmail,\n\taddEventListener: slidedownAddEventListener,\n\tremoveEventListener: slidedownRemoveEventListener,\n};\n\nconst NotificationsNamespace: IOneSignalNotifications = {\n\tget permissionNative(): NotificationPermission { return window.OneSignal?.Notifications?.permissionNative ?? 'default'; },\n\tget permission(): boolean { return window.OneSignal?.Notifications?.permission ?? false; },\n\tsetDefaultUrl: notificationsSetDefaultUrl,\n\tsetDefaultTitle: notificationsSetDefaultTitle,\n\tisPushSupported,\n\trequestPermission: notificationsRequestPermission,\n\taddEventListener: notificationsAddEventListener,\n\tremoveEventListener: notificationsRemoveEventListener,\n};\n\n/**\n * @PublicApi\n */\nfunction isPushSupported(): boolean {\n  return isPushNotificationsSupported();\n}\n\nimport { Injectable } from '@angular/core';\nconst ONESIGNAL_SDK_ID = 'onesignal-sdk';\nconst ONE_SIGNAL_SCRIPT_SRC = 'https://cdn.onesignal.com/sdks/web/v16/OneSignalSDK.page.js';\n\n// true if the script is successfully loaded from CDN.\nlet isOneSignalInitialized = false;\n// true if the script fails to load from CDN. A separate flag is necessary\n// to disambiguate between a CDN load failure and a delayed call to\n// OneSignal#init.\nlet isOneSignalScriptFailed = false;\n\nif (typeof window !== 'undefined') {\n  window.OneSignalDeferred = window.OneSignalDeferred || [];\n  addSDKScript();\n}\n\n/**\n * The following code is copied directly from the native SDK source file BrowserSupportsPush.ts\n * S T A R T\n */\n\n// Checks if the browser supports push notifications by checking if specific\n//   classes and properties on them exist\nfunction isPushNotificationsSupported(): boolean {\n  return supportsVapidPush() || supportsSafariPush();\n}\n\nfunction isMacOSSafariInIframe(): boolean {\n  // Fallback detection for Safari on macOS in an iframe context\n  return window.top !== window && // isContextIframe\n  navigator.vendor === 'Apple Computer, Inc.' && // isSafari\n  navigator.platform === 'MacIntel'; // isMacOS\n}\n\nfunction supportsSafariPush(): boolean {\n  return (window.safari && typeof window.safari.pushNotification !== 'undefined') ||\n          isMacOSSafariInIframe();\n}\n\n// Does the browser support the standard Push API\nfunction supportsVapidPush(): boolean {\n  return typeof PushSubscriptionOptions !== 'undefined' &&\n        PushSubscriptionOptions.prototype.hasOwnProperty('applicationServerKey');\n}\n/* E N D */\n\nfunction handleOnError(): void {\n  isOneSignalScriptFailed = true;\n}\n\nfunction addSDKScript(): void {\n  const script = document.createElement('script');\n  script.id = ONESIGNAL_SDK_ID;\n  script.defer = true;\n  script.src = ONE_SIGNAL_SCRIPT_SRC;\n\n  // Always resolve whether or not the script is successfully initialized.\n  // This is important for users who may block cdn.onesignal.com w/ adblock.\n  script.onerror = () => {\n    handleOnError();\n  };\n\n  document.head.appendChild(script);\n}\n\n\ndeclare global {\n  interface Window {\n    OneSignalDeferred?: OneSignalDeferredLoadedCallback[];\n    OneSignal?: IOneSignalOneSignal;\n    safari?: {\n      pushNotification: any;\n    };\n  }\n}\n\nexport interface IOneSignalOneSignal {\n  [key: string]: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OneSignal implements IOneSignalOneSignal {\n  [key: string]: any;\n\n  constructor() { }\n\n  /* P U B L I C */\n\n  /**\n   * @PublicApi\n   */\n  init(options: IInitObject): Promise<void> {\n    if (isOneSignalInitialized) {\n      return Promise.reject(`OneSignal is already initialized.`);\n    }\n\n    if (!options || !options.appId) {\n      throw new Error('You need to provide your OneSignal appId.');\n    }\n\n    if (!document) {\n      return Promise.reject(`Document is not defined.`);\n    }\n\n    return new Promise<void>((resolve) => {\n      window.OneSignalDeferred?.push((oneSignal: IOneSignalOneSignal) => {\n        oneSignal.init(options).then(() => {\n          isOneSignalInitialized = true;\n          resolve();\n        });\n      });\n    });\n  }\n\n\tUser = UserNamespace;\n\tSession = SessionNamespace;\n\tDebug = DebugNamespace;\n\tSlidedown = SlidedownNamespace;\n\tNotifications = NotificationsNamespace;\n\tlogin = oneSignalLogin;\n\tlogout = oneSignalLogout;\n\tsetConsentGiven = oneSignalSetConsentGiven;\n\tsetConsentRequired = oneSignalSetConsentRequired;\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'onesignal-onesignal-ngx',\n  template: `\n    <p>\n      onesignal-ngx works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class OnesignalNgxComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { OnesignalNgxComponent } from './onesignal-ngx.component';\n\n\n\n@NgModule({\n  declarations: [OnesignalNgxComponent],\n  imports: [\n  ],\n  exports: [OnesignalNgxComponent]\n})\nexport class OnesignalNgxModule { }\n"]}